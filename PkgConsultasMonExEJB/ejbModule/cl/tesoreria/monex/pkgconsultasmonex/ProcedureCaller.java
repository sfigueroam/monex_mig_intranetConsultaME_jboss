/*
 * File: ProcedureCaller.java  2008/09/02 15:05:55
 * User: Daniel Hernandez N. (Tesoreria General de la Republica)
 *
 * This file was generated by "OBCOM SQL Wizard" version 5.1.236.
 * Copyright (c) OBCOM INGENIERIA S.A. (Chile) All rights reserved.
 * OBCOM PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.
 *
 * DO NOT EDIT THIS FILE <<Signature:B+b-mYIlxLH1R7tGSCnZ0g>>.
 */

package cl.tesoreria.monex.pkgconsultasmonex;

import java.sql.Clob;
import java.sql.Connection;
import java.sql.ResultSet;
import javax.sql.RowSet;

import org.apache.log4j.Logger;

import javax.sql.rowset.CachedRowSet;
import com.sun.rowset.CachedRowSetImpl;
//import weblogic.jdbc.rowset.RowSetFactory;
//import weblogic.jdbc.rowset.WLCachedRowSet;

/**
 * Implements methods common to all procedure callers.
 */
public abstract class ProcedureCaller
{
	private static Logger logger = Logger.getLogger("cl.tesoreria.finpub.intranetConsultasME.ProcedureCaller");
	// The same as oracle.jdbc.OracleTypes.CURSOR
    protected static final int ORACLE_CURSOR = -10;

    //------------------------------------------------------------
    //-- ResultSet methods ---------------------------------------
    //------------------------------------------------------------

    /**
     * Builds a RowSet from the supplied ResultSet.
     */
    protected static RowSet toRowSet(ResultSet resultSet)
        throws java.sql.SQLException
    {
    	//RowSetFactory factory = RowSetFactory.newInstance();
    	//WLCachedRowSet rowSet = factory.newCachedRowSet();
    	CachedRowSet rowSet = new CachedRowSetImpl();
    	
        rowSet.populate(resultSet);
        
        return rowSet;
    }

    //------------------------------------------------------------
    //-- CLOB conversion methods ---------------------------------
    //------------------------------------------------------------

    /**
     * Returns the string data of the supplied SQL Clob.
     */
    protected static String toString(Clob clob)
        throws java.sql.SQLException
    {
        if (clob != null)
        {
            try
            {
                java.io.Reader reader =
                    clob.getCharacterStream();
                StringBuffer writer =
                    new StringBuffer(8192);
                int len; char[] buf = new char[8192];
                while ((len = reader.read(buf)) != -1) 
                    writer.append(buf, 0, len);
                return writer.toString();
            }
            catch (java.io.IOException ex)
            {
            	ex.printStackTrace();
            	logger.error("Error en el metodo ProcedureCaller.toString() : " + ex);
            	throw new java.sql.SQLException(ex.toString());
            }
        }
        return null;
    }

    /**
     * Converts the supplied Java String to an SQL Clob.
     */
    protected static Clob toClob(String str, Connection conn)
        throws java.sql.SQLException
    {
        if (str != null)
        {
            try
            {
                Clob clob = oracle.sql.CLOB.createTemporary(
                    conn, false, oracle.sql.CLOB.DURATION_SESSION);
                java.io.Writer writer = clob.setCharacterStream(1);
                try
                {
                    writer.write(str);
                }
                finally
                {
                    writer.close();
                }
                return clob;
            }
            catch (java.io.IOException ex)
            {
            	ex.printStackTrace();
            	logger.error("Error en el metodo ProcedureCaller.toClob() : " + ex);
            	throw new java.sql.SQLException(ex.toString());
            }
        }
        return null;
    }
}
