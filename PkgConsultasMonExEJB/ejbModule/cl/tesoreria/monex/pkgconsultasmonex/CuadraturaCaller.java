/*
 * File: CuadraturaCaller.java  2008/09/02 15:05:55
 * User: Daniel Hernandez N. (Tesoreria General de la Republica)
 *
 * This file was generated by "OBCOM SQL Wizard" version 5.1.236.
 * Copyright (c) OBCOM INGENIERIA S.A. (Chile) All rights reserved.
 * OBCOM PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.
 *
 * DO NOT EDIT THIS FILE <<Signature:uFORqcb0Iwd2Hv0pZi1bX6>>.
 */

package cl.tesoreria.monex.pkgconsultasmonex;

import java.math.BigDecimal;
import java.sql.CallableStatement;
import java.sql.Connection;
import java.sql.Types;
import java.util.ArrayList;
import javax.sql.RowSet;

/**
 * Implements a caller of procedure "SII.PKG_CONSULTAS_MON_EX.CUADRATURA".
 */
public class CuadraturaCaller extends ProcedureCaller
{
    /**
     * Executes procedure "SII.PKG_CONSULTAS_MON_EX.CUADRATURA".
     *
     * O_COD_ERROR        NUMBER             Output
     * ARCHIVO1           VARCHAR2(4000)     Output
     * ARCHIVO2           VARCHAR2(4000)     Output
     * ARCHIVO3           VARCHAR2(4000)     Output
     * COD9927_AUX        NUMBER             Input
     */
    public static CuadraturaResult execute(Connection conn, BigDecimal cod9927Aux)
        throws java.sql.SQLException
    {
        CuadraturaResult result = new CuadraturaResult();
        ArrayList resultSets = new ArrayList();
        CallableStatement call = conn.prepareCall("{call SII.PKG_CONSULTAS_MON_EX.CUADRATURA(?,?,?,?,?)}");
        try
        {
            call.registerOutParameter(1, Types.NUMERIC);
            call.registerOutParameter(2, Types.VARCHAR);
            call.registerOutParameter(3, Types.VARCHAR);
            call.registerOutParameter(4, Types.VARCHAR);
            call.setBigDecimal(5, cod9927Aux);
            int updateCount = 0;
            boolean haveRset = call.execute();
            while (haveRset || updateCount != -1)
            {
                if (!haveRset)
                    updateCount = call.getUpdateCount();
                else
                    resultSets.add(toRowSet(call.getResultSet()));
                haveRset = call.getMoreResults();
            }
            result.setOCodError(call.getBigDecimal(1));
            result.setArchivo1(call.getString(2));
            result.setArchivo2(call.getString(3));
            result.setArchivo3(call.getString(4));
        }
        finally
        {
            call.close();
        }
        if (resultSets.size() > 0)
        {
            RowSet[] rowSets = new RowSet[resultSets.size()];
            result.setRowSets((RowSet[]) resultSets.toArray(rowSets));
        }
        return result;
    }
}
